{"ast":null,"code":"var _jsxFileName = \"/Users/aasthachandel/my-app/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n//                 const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriendRequests(requestResponse.data);\n//                 console.log(\"Friend Requests response\", requestResponse.data);\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n//             setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n//     const acceptRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/accept',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request accepted\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const rejectRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/reject',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request rejected\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//         } catch (error) {\n//             console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const removeFriend = async (friendId) => {\n//         try {\n//             // Send request to remove friend\n//             await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             toast.success(\"Friend removed\");\n\n//             // Update the friends list\n//             setFriends(friends.filter(friend => friend._id !== friendId));\n\n//         } catch (error) {\n//             console.error('Error removing friend', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button onClick={() => removeFriend(friend._id)}>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button onClick={() => addFriend(rec._id)}>Add Friend</button>\n//                 </div>\n//             ))}\n\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? <p>No friend requests</p> : friendRequests.map(request => (\n//                 <div key={request._id}>\n//                     {request.username} <button onClick={() => acceptRequest(request._id)}>Accept</button> <button onClick={() => rejectRequest(request._id)}>Reject</button>\n//                 </div>\n//             ))}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Home.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [friends, setFriends] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [friendRequests, setFriendRequests] = useState([]);\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch users\n        const userResponse = await axios.get('http://localhost:3000/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUsers(userResponse.data);\n\n        // Fetch friends\n        const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriends(friendResponse.data);\n\n        // Fetch recommendations\n        const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRecommendations(recommendationResponse.data);\n\n        // Fetch friend requests\n        const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriendRequests(requestResponse.data);\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    };\n    fetchData();\n  }, [token]);\n  const addFriend = async userId => {\n    try {\n      const response = await axios.post('http://localhost:3000/api/friend-request', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request sent\");\n      setUsers(users.filter(user => user._id !== userId));\n      setRecommendations(recommendations.filter(rec => rec._id !== userId));\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error sending friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const acceptRequest = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request/accept', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request accepted\");\n      setFriendRequests(friendRequests.filter(request => request._id !== userId));\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const rejectRequest = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request/reject', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request rejected\");\n      setFriendRequests(friendRequests.filter(request => request._id !== userId));\n    } catch (error) {\n      console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const removeFriend = async friendId => {\n    try {\n      await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend removed\");\n      setFriends(friends.filter(friend => friend._id !== friendId));\n    } catch (error) {\n      console.error('Error removing friend', error.response ? error.response.data : error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: users.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No users found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }, this) : users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-add\",\n          onClick: () => addFriend(user._id),\n          children: \"Add Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 29\n        }, this)]\n      }, user._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Friends List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: friends.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You have no friends yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }, this) : friends.map(friend => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: friend.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-remove\",\n          onClick: () => removeFriend(friend._id),\n          children: \"Unfriend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 29\n        }, this)]\n      }, friend._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: recommendations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No recommendations found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this) : recommendations.map(rec => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: rec.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mutual-friends\",\n          children: [\"Mutual Friends: \", rec.mutualFriendsCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-add\",\n          onClick: () => addFriend(rec._id),\n          children: \"Add Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 29\n        }, this)]\n      }, rec._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Friend Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: friendRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No friend requests\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }, this) : friendRequests.map(request => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: request.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-accept\",\n          onClick: () => acceptRequest(request._id),\n          children: \"Accept\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-reject\",\n          onClick: () => rejectRequest(request._id),\n          children: \"Reject\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 29\n        }, this)]\n      }, request._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"vGpNTKCvRRm5S8DwImZYxd2ys+w=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","axios","toast","ToastContainer","jsxDEV","_jsxDEV","Home","_s","users","setUsers","friends","setFriends","recommendations","setRecommendations","friendRequests","setFriendRequests","token","localStorage","getItem","fetchData","userResponse","get","headers","Authorization","data","friendResponse","recommendationResponse","requestResponse","error","console","addFriend","userId","response","post","success","filter","user","_id","rec","message","acceptRequest","request","rejectRequest","removeFriend","friendId","delete","friend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","username","onClick","mutualFriendsCount","_c","$RefreshReg$"],"sources":["/Users/aasthachandel/my-app/frontend/src/components/Home.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n//                 const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriendRequests(requestResponse.data);\n//                 console.log(\"Friend Requests response\", requestResponse.data);\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n//             setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n//     const acceptRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/accept',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request accepted\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const rejectRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/reject',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request rejected\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//         } catch (error) {\n//             console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const removeFriend = async (friendId) => {\n//         try {\n//             // Send request to remove friend\n//             await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             toast.success(\"Friend removed\");\n\n//             // Update the friends list\n//             setFriends(friends.filter(friend => friend._id !== friendId));\n\n//         } catch (error) {\n//             console.error('Error removing friend', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button onClick={() => removeFriend(friend._id)}>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button onClick={() => addFriend(rec._id)}>Add Friend</button>\n//                 </div>\n//             ))}\n\n\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? <p>No friend requests</p> : friendRequests.map(request => (\n//                 <div key={request._id}>\n//                     {request.username} <button onClick={() => acceptRequest(request._id)}>Accept</button> <button onClick={() => rejectRequest(request._id)}>Reject</button>\n//                 </div>\n//             ))}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Home.css'; // Import the CSS file\n\nconst Home = () => {\n    const [users, setUsers] = useState([]);\n    const [friends, setFriends] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [friendRequests, setFriendRequests] = useState([]);\n\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Fetch users\n                const userResponse = await axios.get('http://localhost:3000/api/users', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setUsers(userResponse.data);\n\n                // Fetch friends\n                const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriends(friendResponse.data);\n\n                // Fetch recommendations\n                const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRecommendations(recommendationResponse.data);\n\n                // Fetch friend requests\n                const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriendRequests(requestResponse.data);\n\n            } catch (error) {\n                console.error('Error fetching data', error);\n            }\n        };\n        fetchData();\n    }, [token]);\n\n    const addFriend = async (userId) => {\n        try {\n            const response = await axios.post(\n                'http://localhost:3000/api/friend-request',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Friend request sent\");\n\n            setUsers(users.filter(user => user._id !== userId));\n            setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n\n        } catch (error) {\n            console.error('Error sending friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const acceptRequest = async (userId) => {\n        try {\n            await axios.post(\n                'http://localhost:3000/api/friend-request/accept',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Friend request accepted\");\n\n            setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n\n        } catch (error) {\n            console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const rejectRequest = async (userId) => {\n        try {\n            await axios.post(\n                'http://localhost:3000/api/friend-request/reject',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Friend request rejected\");\n\n            setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n        } catch (error) {\n            console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const removeFriend = async (friendId) => {\n        try {\n            await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            toast.success(\"Friend removed\");\n\n            setFriends(friends.filter(friend => friend._id !== friendId));\n\n        } catch (error) {\n            console.error('Error removing friend', error.response ? error.response.data : error.message);\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <h2 className=\"title\">All Users</h2>\n            <div className=\"list\">\n                {users.length === 0 ? (\n                    <p>No users found</p>\n                ) : (\n                    users.map(user => (\n                        <div className=\"user-card\" key={user._id}>\n                            <span className=\"username\">{user.username}</span>\n                            <button className=\"btn btn-add\" onClick={() => addFriend(user._id)}>Add Friend</button>\n                        </div>\n                    ))\n                )}\n            </div>\n\n            <h2 className=\"title\">Friends List</h2>\n            <div className=\"list\">\n                {friends.length === 0 ? (\n                    <p>You have no friends yet.</p>\n                ) : (\n                    friends.map(friend => (\n                        <div className=\"user-card\" key={friend._id}>\n                            <span className=\"username\">{friend.username}</span>\n                            <button className=\"btn btn-remove\" onClick={() => removeFriend(friend._id)}>Unfriend</button>\n                        </div>\n                    ))\n                )}\n            </div>\n\n            <h2 className=\"title\">Recommendations</h2>\n            <div className=\"list\">\n                {recommendations.length === 0 ? (\n                    <p>No recommendations found</p>\n                ) : (\n                    recommendations.map(rec => (\n                        <div className=\"user-card\" key={rec._id}>\n                            <span className=\"username\">{rec.username}</span>\n                            <span className=\"mutual-friends\">Mutual Friends: {rec.mutualFriendsCount}</span>\n                            <button className=\"btn btn-add\" onClick={() => addFriend(rec._id)}>Add Friend</button>\n                        </div>\n                    ))\n                )}\n            </div>\n\n            <h2 className=\"title\">Friend Requests</h2>\n            <div className=\"list\">\n                {friendRequests.length === 0 ? (\n                    <p>No friend requests</p>\n                ) : (\n                    friendRequests.map(request => (\n                        <div className=\"user-card\" key={request._id}>\n                            <span className=\"username\">{request.username}</span>\n                            <button className=\"btn btn-accept\" onClick={() => acceptRequest(request._id)}>Accept</button>\n                            <button className=\"btn btn-reject\" onClick={() => rejectRequest(request._id)}>Reject</button>\n                        </div>\n                    ))\n                )}\n            </div>\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,OAAO,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,cA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}