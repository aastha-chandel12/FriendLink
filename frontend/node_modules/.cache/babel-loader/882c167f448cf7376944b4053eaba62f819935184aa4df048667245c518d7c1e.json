{"ast":null,"code":"var _jsxFileName = \"/Users/aasthachandel/my-app/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n\n//                 });\n//                 setUsers(userResponse.data);\n//                 console.log(\"worked\");\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"response\", friendResponse.data)\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 console.log(\"done\")\n\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"recom\", recommendationResponse.data.username)\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]); // Notice 'users' is not included here\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\"); // Display error toast\n//             // Update state: Remove user from `users` and add to `friends`\n//             setUsers(users.filter(user => user._id !== userId));\n//             // Optionally, you may want to refetch the friends list or update it manually if needed\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             {/* \n//             {users.length === 0 ? <p>No users found</p> : users.map(user => (\n//                 <div key={user._id}>\n//                     {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                 </div>\n//             ))} */}\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n//                 </div>\n//             ))}\n//             <ToastContainer /> {/* Add this to show toast notifications */}\n//         </div>\n//     );\n// };\n\n// export default Home;\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n//                 console.log(\"Users fetched\", userResponse.data);\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n//                 const user = userResponse.data.find(u => u._id === token); // Adjust this if token is not user ID\n//                 if (user) {\n//                     setFriendRequests(user.friendRequests);\n//                     console.log(\"Friend Requests:\", user.friendRequests);\n//                 }\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n//                 </div>\n//             ))}\n\n//             {/* Display friend requests for debugging */}\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? (\n//                 <p>No friend requests</p>\n//             ) : (\n//                 friendRequests.map(request => (\n//                     <div key={request}>\n//                         {request} {/* Modify this based on actual data structure */}\n//                     </div>\n//                 ))\n//             )}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // Import the default styles\nimport jwtDecode from 'jwt-decode'; // Correct import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [friends, setFriends] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [friendRequests, setFriendRequests] = useState([]);\n  const token = localStorage.getItem('token');\n  const decodedToken = token ? jwtDecode(token) : {};\n  const currentUserId = decodedToken._id; // Adjust based on token structure\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch users\n        const userResponse = await axios.get('http://localhost:3000/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUsers(userResponse.data);\n        console.log(\"Users fetched\", userResponse.data);\n\n        // Fetch friends\n        const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriends(friendResponse.data);\n        console.log(\"Friends response\", friendResponse.data);\n\n        // Fetch recommendations\n        const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRecommendations(recommendationResponse.data);\n        console.log(\"Recommendations response\", recommendationResponse.data);\n\n        // Fetch and set friend requests\n        const userResponseData = await axios.get(`http://localhost:3000/api/user/${currentUserId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const friendRequestsIds = userResponseData.data.friendRequests;\n        const friendRequestsData = await Promise.all(friendRequestsIds.map(id => axios.get(`http://localhost:3000/api/user/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        })));\n        setFriendRequests(friendRequestsData.map(response => response.data));\n        console.log(\"Friend Requests:\", friendRequestsData.map(response => response.data));\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    };\n    fetchData();\n  }, [token, currentUserId]);\n  const addFriend = async userId => {\n    try {\n      // Send friend request\n      const response = await axios.post('http://localhost:3000/api/friend-request', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Friend request sent', response.data);\n      toast.success(\"Friend request sent\");\n\n      // Update state\n      setUsers(users.filter(user => user._id !== userId));\n\n      // Refetch friends\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error sending friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), users.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }, this) : users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [user.username, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addFriend(user._id),\n        children: \"Add Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 41\n      }, this)]\n    }, user._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friends List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), friends.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have no friends yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 17\n    }, this) : friends.map(friend => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [friend.username, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Unfriend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 43\n      }, this)]\n    }, friend._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this), recommendations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No recommendations found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 45\n    }, this) : recommendations.map(rec => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [rec.username, \" (Mutual Friends: \", rec.mutualFriendsCount, \") \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 79\n      }, this)]\n    }, rec._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friend Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this), friendRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No friend requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }, this) : friendRequests.map(request => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [request.username, \" \"]\n    }, request._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"vGpNTKCvRRm5S8DwImZYxd2ys+w=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","axios","toast","ToastContainer","jwtDecode","jsxDEV","_jsxDEV","Home","_s","users","setUsers","friends","setFriends","recommendations","setRecommendations","friendRequests","setFriendRequests","token","localStorage","getItem","decodedToken","currentUserId","_id","fetchData","userResponse","get","headers","Authorization","data","console","log","friendResponse","recommendationResponse","userResponseData","friendRequestsIds","friendRequestsData","Promise","all","map","id","response","error","addFriend","userId","post","success","filter","user","message","children","fileName","_jsxFileName","lineNumber","columnNumber","length","username","onClick","friend","rec","mutualFriendsCount","request","_c","$RefreshReg$"],"sources":["/Users/aasthachandel/my-app/frontend/src/components/Home.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n\n\n//                 });\n//                 setUsers(userResponse.data);\n//                 console.log(\"worked\");\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"response\", friendResponse.data)\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 console.log(\"done\")\n\n\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"recom\", recommendationResponse.data.username)\n\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]); // Notice 'users' is not included here\n\n\n\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\"); // Display error toast\n//             // Update state: Remove user from `users` and add to `friends`\n//             setUsers(users.filter(user => user._id !== userId));\n//             // Optionally, you may want to refetch the friends list or update it manually if needed\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             {/* \n//             {users.length === 0 ? <p>No users found</p> : users.map(user => (\n//                 <div key={user._id}>\n//                     {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                 </div>\n//             ))} */}\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n//                 </div>\n//             ))}\n//             <ToastContainer /> {/* Add this to show toast notifications */}\n//         </div>\n//     );\n// };\n\n// export default Home;\n\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n//                 console.log(\"Users fetched\", userResponse.data);\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n//                 const user = userResponse.data.find(u => u._id === token); // Adjust this if token is not user ID\n//                 if (user) {\n//                     setFriendRequests(user.friendRequests);\n//                     console.log(\"Friend Requests:\", user.friendRequests);\n//                 }\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n//                 </div>\n//             ))}\n\n//             {/* Display friend requests for debugging */}\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? (\n//                 <p>No friend requests</p>\n//             ) : (\n//                 friendRequests.map(request => (\n//                     <div key={request}>\n//                         {request} {/* Modify this based on actual data structure */}\n//                     </div>\n//                 ))\n//             )}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // Import the default styles\nimport jwtDecode from 'jwt-decode'; // Correct import\nconst Home = () => {\n    const [users, setUsers] = useState([]);\n    const [friends, setFriends] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [friendRequests, setFriendRequests] = useState([]);\n\n    const token = localStorage.getItem('token');\n    const decodedToken = token ? jwtDecode(token) : {};\n    const currentUserId = decodedToken._id; // Adjust based on token structure\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Fetch users\n                const userResponse = await axios.get('http://localhost:3000/api/users', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setUsers(userResponse.data);\n                console.log(\"Users fetched\", userResponse.data);\n\n                // Fetch friends\n                const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriends(friendResponse.data);\n                console.log(\"Friends response\", friendResponse.data);\n\n                // Fetch recommendations\n                const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRecommendations(recommendationResponse.data);\n                console.log(\"Recommendations response\", recommendationResponse.data);\n\n                // Fetch and set friend requests\n                const userResponseData = await axios.get(`http://localhost:3000/api/user/${currentUserId}`, {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                const friendRequestsIds = userResponseData.data.friendRequests;\n                const friendRequestsData = await Promise.all(friendRequestsIds.map(id =>\n                    axios.get(`http://localhost:3000/api/user/${id}`, {\n                        headers: { Authorization: `Bearer ${token}` }\n                    })\n                ));\n                setFriendRequests(friendRequestsData.map(response => response.data));\n                console.log(\"Friend Requests:\", friendRequestsData.map(response => response.data));\n\n            } catch (error) {\n                console.error('Error fetching data', error);\n            }\n        };\n        fetchData();\n    }, [token, currentUserId]);\n\n    const addFriend = async (userId) => {\n        try {\n            // Send friend request\n            const response = await axios.post(\n                'http://localhost:3000/api/friend-request',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            console.log('Friend request sent', response.data);\n            toast.success(\"Friend request sent\");\n\n            // Update state\n            setUsers(users.filter(user => user._id !== userId));\n\n            // Refetch friends\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n\n        } catch (error) {\n            console.error('Error sending friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    return (\n        <div>\n            <h2>All Users</h2>\n            {users.length === 0 ? (\n                <p>No users found</p>\n            ) : (\n                users.map(user => (\n                    <div key={user._id}>\n                        {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Friends List</h1>\n            {friends.length === 0 ? (\n                <p>You have no friends yet.</p>\n            ) : (\n                friends.map(friend => (\n                    <div key={friend._id}>\n                        {friend.username} <button>Unfriend</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Recommendations</h1>\n            {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n                <div key={rec._id}>\n                    {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n                </div>\n            ))}\n\n            <h1>Friend Requests</h1>\n            {friendRequests.length === 0 ? (\n                <p>No friend requests</p>\n            ) : (\n                friendRequests.map(request => (\n                    <div key={request._id}>\n                        {request.username} {/* Display username */}\n                    </div>\n                ))\n            )}\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC,CAAC,CAAC;AAChD,OAAOC,SAAS,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}