{"ast":null,"code":"var _jsxFileName = \"/Users/aasthachandel/my-app/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n//                 console.log(\"Users fetched\", userResponse.data);\n//                 userResponse.data.forEach(user => {\n//                     setFriendRequests(user.friendRequests);\n//                     console.log(\"User:\", user.friendRequests);\n//                 });\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n//                 </div>\n//             ))}\n\n//             {/* Display friend requests for debugging */}\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? (\n//                 <p>No friend requests</p>\n//             ) : (\n//                 friendRequests.map(request => (\n//                     <div key={request}>\n//                         {request} {/* Modify this based on actual data structure */}\n//                     </div>\n//                 ))\n//             )}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // Import the default styles\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [friends, setFriends] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [friendRequests, setFriendRequests] = useState([]);\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Decode token to get user ID\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken._id; // Adjust according to your token structure\n\n        // Fetch users\n        const userResponse = await axios.get('http://localhost:3000/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUsers(userResponse.data);\n        console.log(\"Users fetched\", userResponse.data);\n\n        // Check if userResponse.data is an array\n        if (isArray(userResponse.data)) {\n          console.error(\"Expected an array of users but got:\", userResponse.data);\n          return;\n        }\n\n        // Find the user with the decoded user ID\n        const user = userResponse.data.find(u => u._id === userId);\n        console.log(\"User found:\", user);\n        if (user) {\n          // Extract unique friend requests\n          const uniqueFriendRequests = [...new Set(user.friendRequests)];\n          console.log(\"Unique Friend Requests:\", uniqueFriendRequests);\n\n          // Set state\n          setFriendRequests(uniqueFriendRequests);\n        } else {\n          console.log(\"User with ID:\", userId, \"not found\");\n        }\n\n        // Fetch friends\n        const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriends(friendResponse.data);\n        console.log(\"Friends response\", friendResponse.data);\n\n        // Fetch recommendations\n        const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRecommendations(recommendationResponse.data);\n        console.log(\"Recommendations response\", recommendationResponse.data);\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    };\n    fetchData();\n  }, [token]);\n  const addFriend = async userId => {\n    try {\n      // Send friend request\n      const response = await axios.post('http://localhost:3000/api/friend-request', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Friend request sent', response.data);\n      toast.success(\"Friend request sent\");\n\n      // Update state\n      setUsers(users.filter(user => user._id !== userId));\n\n      // Refetch friends\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error sending friend request', error.response ? error.response.data : error.message);\n    }\n  };\n\n  // Function to get username by ObjectId\n  const getUsernameById = id => {\n    const user = users.find(user => user._id === id);\n    return user ? user.username : 'Unknown';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), users.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }, this) : users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [user.username, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addFriend(user._id),\n        children: \"Add Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 41\n      }, this)]\n    }, user._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friends List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), friends.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have no friends yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }, this) : friends.map(friend => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [friend.username, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Unfriend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 43\n      }, this)]\n    }, friend._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), recommendations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No recommendations found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 45\n    }, this) : recommendations.map(rec => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [rec.username, \" (Mutual Friends: \", rec.mutualFriendsCount, \") \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 79\n      }, this)]\n    }, rec._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friend Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), friendRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No friend requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }, this) : friendRequests.map(requestId => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [getUsernameById(requestId), \" \"]\n    }, requestId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"vGpNTKCvRRm5S8DwImZYxd2ys+w=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","axios","toast","ToastContainer","jwtDecode","jsxDEV","_jsxDEV","Home","_s","users","setUsers","friends","setFriends","recommendations","setRecommendations","friendRequests","setFriendRequests","token","localStorage","getItem","fetchData","decodedToken","userId","_id","userResponse","get","headers","Authorization","data","console","log","isArray","error","user","find","u","uniqueFriendRequests","Set","friendResponse","recommendationResponse","addFriend","response","post","success","filter","message","getUsernameById","id","username","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","onClick","friend","rec","mutualFriendsCount","requestId","_c","$RefreshReg$"],"sources":["/Users/aasthachandel/my-app/frontend/src/components/Home.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n//                 console.log(\"Users fetched\", userResponse.data);\n//                 userResponse.data.forEach(user => {\n//                     setFriendRequests(user.friendRequests);\n//                     console.log(\"User:\", user.friendRequests);\n//                 });\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n//                 </div>\n//             ))}\n\n//             {/* Display friend requests for debugging */}\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? (\n//                 <p>No friend requests</p>\n//             ) : (\n//                 friendRequests.map(request => (\n//                     <div key={request}>\n//                         {request} {/* Modify this based on actual data structure */}\n//                     </div>\n//                 ))\n//             )}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // Import the default styles\nimport { jwtDecode } from 'jwt-decode';\nconst Home = () => {\n    const [users, setUsers] = useState([]);\n    const [friends, setFriends] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [friendRequests, setFriendRequests] = useState([]);\n\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Decode token to get user ID\n                const decodedToken = jwtDecode(token);\n                const userId = decodedToken._id; // Adjust according to your token structure\n\n                // Fetch users\n                const userResponse = await axios.get('http://localhost:3000/api/users', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setUsers(userResponse.data);\n                console.log(\"Users fetched\", userResponse.data);\n\n                // Check if userResponse.data is an array\n                if (isArray(userResponse.data)) {\n                    console.error(\"Expected an array of users but got:\", userResponse.data);\n                    return;\n                }\n\n                // Find the user with the decoded user ID\n                const user = userResponse.data.find(u => u._id === userId);\n                console.log(\"User found:\", user);\n\n                if (user) {\n                    // Extract unique friend requests\n                    const uniqueFriendRequests = [...new Set(user.friendRequests)];\n                    console.log(\"Unique Friend Requests:\", uniqueFriendRequests);\n\n                    // Set state\n                    setFriendRequests(uniqueFriendRequests);\n                } else {\n                    console.log(\"User with ID:\", userId, \"not found\");\n                }\n\n                // Fetch friends\n                const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriends(friendResponse.data);\n                console.log(\"Friends response\", friendResponse.data);\n\n                // Fetch recommendations\n                const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRecommendations(recommendationResponse.data);\n                console.log(\"Recommendations response\", recommendationResponse.data);\n\n\n\n            } catch (error) {\n                console.error('Error fetching data', error);\n            }\n        };\n        fetchData();\n    }, [token]);\n\n    const addFriend = async (userId) => {\n        try {\n            // Send friend request\n            const response = await axios.post(\n                'http://localhost:3000/api/friend-request',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            console.log('Friend request sent', response.data);\n            toast.success(\"Friend request sent\");\n\n            // Update state\n            setUsers(users.filter(user => user._id !== userId));\n\n            // Refetch friends\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n\n        } catch (error) {\n            console.error('Error sending friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    // Function to get username by ObjectId\n    const getUsernameById = (id) => {\n        const user = users.find(user => user._id === id);\n        return user ? user.username : 'Unknown';\n    };\n\n    return (\n        <div>\n            <h2>All Users</h2>\n            {users.length === 0 ? (\n                <p>No users found</p>\n            ) : (\n                users.map(user => (\n                    <div key={user._id}>\n                        {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Friends List</h1>\n            {friends.length === 0 ? (\n                <p>You have no friends yet.</p>\n            ) : (\n                friends.map(friend => (\n                    <div key={friend._id}>\n                        {friend.username} <button>Unfriend</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Recommendations</h1>\n            {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n                <div key={rec._id}>\n                    {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button>Add Friend</button>\n                </div>\n            ))}\n\n            <h1>Friend Requests</h1>\n            {friendRequests.length === 0 ? (\n                <p>No friend requests</p>\n            ) : (\n                friendRequests.map(requestId => (\n                    <div key={requestId}>\n                        {getUsernameById(requestId)} {/* Display username */}\n                    </div>\n                ))\n            )}\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}