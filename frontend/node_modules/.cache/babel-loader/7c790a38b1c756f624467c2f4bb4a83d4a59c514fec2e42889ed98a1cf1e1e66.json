{"ast":null,"code":"var _jsxFileName = \"/Users/aasthachandel/my-app/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n//                 const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriendRequests(requestResponse.data);\n//                 console.log(\"Friend Requests response\", requestResponse.data);\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n//             setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n//     const acceptRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/accept',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request accepted\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const rejectRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/reject',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request rejected\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//         } catch (error) {\n//             console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button onClick={() => addFriend(rec._id)}>Add Friend</button>\n//                 </div>\n//             ))}\n\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? <p>No friend requests</p> : friendRequests.map(request => (\n//                 <div key={request._id}>\n//                     {request.username} <button onClick={() => acceptRequest(request._id)}>Accept</button> <button onClick={() => rejectRequest(request._id)}>Reject</button>\n//                 </div>\n//             ))}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Home.css'; // Import the CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [friends, setFriends] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [friendRequests, setFriendRequests] = useState([]);\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const userResponse = await axios.get('http://localhost:3000/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUsers(userResponse.data);\n        const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriends(friendResponse.data);\n        const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRecommendations(recommendationResponse.data);\n        const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriendRequests(requestResponse.data);\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    };\n    fetchData();\n  }, [token]);\n  const addFriend = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request sent\");\n      setUsers(users.filter(user => user._id !== userId));\n      setRecommendations(recommendations.filter(rec => rec._id !== userId));\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error sending friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const acceptRequest = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request/accept', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request accepted\");\n      setFriendRequests(friendRequests.filter(request => request._id !== userId));\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const rejectRequest = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request/reject', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request rejected\");\n      setFriendRequests(friendRequests.filter(request => request._id !== userId));\n    } catch (error) {\n      console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), users.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No users found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 17\n    }, this) : users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/path/to/default-profile.jpg\",\n        alt: \"User Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addFriend(user._id),\n        children: \"Follow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 25\n      }, this)]\n    }, user._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friends List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), friends.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have no friends yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }, this) : friends.map(friend => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"friend-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/path/to/default-profile.jpg\",\n        alt: \"Friend Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: friend.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"unfriend\",\n        children: \"Unfriend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 25\n      }, this)]\n    }, friend._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), recommendations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No recommendations found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }, this) : recommendations.map(rec => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommendation-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/path/to/default-profile.jpg\",\n        alt: \"Recommended Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: rec.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addFriend(rec._id),\n        children: \"Follow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 25\n      }, this)]\n    }, rec._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Friend Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), friendRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No friend requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }, this) : friendRequests.map(request => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"request-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/path/to/default-profile.jpg\",\n        alt: \"Request Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: request.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => acceptRequest(request._id),\n        children: \"Accept\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => rejectRequest(request._id),\n        className: \"reject\",\n        children: \"Reject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 25\n      }, this)]\n    }, request._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"vGpNTKCvRRm5S8DwImZYxd2ys+w=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","axios","toast","ToastContainer","jsxDEV","_jsxDEV","Home","_s","users","setUsers","friends","setFriends","recommendations","setRecommendations","friendRequests","setFriendRequests","token","localStorage","getItem","fetchData","userResponse","get","headers","Authorization","data","friendResponse","recommendationResponse","requestResponse","error","console","addFriend","userId","post","success","filter","user","_id","rec","response","message","acceptRequest","request","rejectRequest","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","className","src","alt","username","onClick","friend","_c","$RefreshReg$"],"sources":["/Users/aasthachandel/my-app/frontend/src/components/Home.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css'; // Import the default styles\n\n// const Home = () => {\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n//                 console.log(\"Friends response\", friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"Recommendations response\", recommendationResponse.data);\n\n//                 // Extract and set friend requests from the user data\n//                 const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriendRequests(requestResponse.data);\n//                 console.log(\"Friend Requests response\", requestResponse.data);\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             // Send friend request\n//             const response = await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             console.log('Friend request sent', response.data);\n//             toast.success(\"Friend request sent\");\n\n//             // Update state\n//             setUsers(users.filter(user => user._id !== userId));\n//             setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n//             // Refetch friends\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n//     const acceptRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/accept',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request accepted\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const rejectRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/reject',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request rejected\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//         } catch (error) {\n//             console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>All Users</h2>\n//             {users.length === 0 ? (\n//                 <p>No users found</p>\n//             ) : (\n//                 users.map(user => (\n//                     <div key={user._id}>\n//                         {user.username} <button onClick={() => addFriend(user._id)}>Add Friend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Friends List</h1>\n//             {friends.length === 0 ? (\n//                 <p>You have no friends yet.</p>\n//             ) : (\n//                 friends.map(friend => (\n//                     <div key={friend._id}>\n//                         {friend.username} <button>Unfriend</button>\n//                     </div>\n//                 ))\n//             )}\n\n//             <h1>Recommendations</h1>\n//             {recommendations.length === 0 ? <p>No recommendations found</p> : recommendations.map(rec => (\n//                 <div key={rec._id}>\n//                     {rec.username} (Mutual Friends: {rec.mutualFriendsCount}) <button onClick={() => addFriend(rec._id)}>Add Friend</button>\n//                 </div>\n//             ))}\n\n\n//             <h1>Friend Requests</h1>\n//             {friendRequests.length === 0 ? <p>No friend requests</p> : friendRequests.map(request => (\n//                 <div key={request._id}>\n//                     {request.username} <button onClick={() => acceptRequest(request._id)}>Accept</button> <button onClick={() => rejectRequest(request._id)}>Reject</button>\n//                 </div>\n//             ))}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Home.css'; // Import the CSS\n\nconst Home = () => {\n    const [users, setUsers] = useState([]);\n    const [friends, setFriends] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [friendRequests, setFriendRequests] = useState([]);\n\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const userResponse = await axios.get('http://localhost:3000/api/users', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setUsers(userResponse.data);\n\n                const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriends(friendResponse.data);\n\n                const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRecommendations(recommendationResponse.data);\n\n                const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriendRequests(requestResponse.data);\n            } catch (error) {\n                console.error('Error fetching data', error);\n            }\n        };\n        fetchData();\n    }, [token]);\n\n    const addFriend = async (userId) => {\n        try {\n            await axios.post('http://localhost:3000/api/friend-request', { userId }, { headers: { Authorization: `Bearer ${token}` } });\n            toast.success(\"Friend request sent\");\n            setUsers(users.filter(user => user._id !== userId));\n            setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n        } catch (error) {\n            console.error('Error sending friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const acceptRequest = async (userId) => {\n        try {\n            await axios.post('http://localhost:3000/api/friend-request/accept', { userId }, { headers: { Authorization: `Bearer ${token}` } });\n            toast.success(\"Friend request accepted\");\n            setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n        } catch (error) {\n            console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const rejectRequest = async (userId) => {\n        try {\n            await axios.post('http://localhost:3000/api/friend-request/reject', { userId }, { headers: { Authorization: `Bearer ${token}` } });\n            toast.success(\"Friend request rejected\");\n            setFriendRequests(friendRequests.filter(request => request._id !== userId));\n        } catch (error) {\n            console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    return (\n        <div>\n            <h2>All Users</h2>\n            {users.length === 0 ? (\n                <p>No users found</p>\n            ) : (\n                users.map(user => (\n                    <div key={user._id} className=\"user-card\">\n                        <img src=\"/path/to/default-profile.jpg\" alt=\"User Profile\" />\n                        <p>{user.username}</p>\n                        <button onClick={() => addFriend(user._id)}>Follow</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Friends List</h1>\n            {friends.length === 0 ? (\n                <p>You have no friends yet.</p>\n            ) : (\n                friends.map(friend => (\n                    <div key={friend._id} className=\"friend-card\">\n                        <img src=\"/path/to/default-profile.jpg\" alt=\"Friend Profile\" />\n                        <p>{friend.username}</p>\n                        <button className=\"unfriend\">Unfriend</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Recommendations</h1>\n            {recommendations.length === 0 ? (\n                <p>No recommendations found</p>\n            ) : (\n                recommendations.map(rec => (\n                    <div key={rec._id} className=\"recommendation-card\">\n                        <img src=\"/path/to/default-profile.jpg\" alt=\"Recommended Profile\" />\n                        <p>{rec.username}</p>\n                        <button onClick={() => addFriend(rec._id)}>Follow</button>\n                    </div>\n                ))\n            )}\n\n            <h1>Friend Requests</h1>\n            {friendRequests.length === 0 ? (\n                <p>No friend requests</p>\n            ) : (\n                friendRequests.map(request => (\n                    <div key={request._id} className=\"request-card\">\n                        <img src=\"/path/to/default-profile.jpg\" alt=\"Request Profile\" />\n                        <p>{request.username}</p>\n                        <button onClick={() => acceptRequest(request._id)}>Accept</button>\n                        <button onClick={() => rejectRequest(request._id)} className=\"reject\">Reject</button>\n                    </div>\n                ))\n            )}\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,OAAO,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMgB,KAAK,GAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}