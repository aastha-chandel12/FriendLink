{"ast":null,"code":"var _jsxFileName = \"/Users/aasthachandel/my-app/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import { useNavigate } from 'react-router-dom';  // Import useNavigate for redirection\n// import 'react-toastify/dist/ReactToastify.css';\n// import './Home.css'; // Import the CSS file\n\n// const Home = () => {\n\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n//     const [searchTerm, setSearchTerm] = useState(''); // State for search term\n//     const navigate = useNavigate();  // Initialize useNavigate\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"recomm\", recommendationResponse.data)\n//                 // Fetch friend requests\n//                 const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriendRequests(requestResponse.data);\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request sent\");\n\n//             setUsers(users.filter(user => user._id !== userId));\n//             setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const acceptRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/accept',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request accepted\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const rejectRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/reject',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request rejected\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//         } catch (error) {\n//             console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const removeFriend = async (friendId) => {\n//         try {\n//             await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             toast.success(\"Friend removed\");\n\n//             setFriends(friends.filter(friend => friend._id !== friendId));\n\n//         } catch (error) {\n//             console.error('Error removing friend', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     // Logout function\n//     const logout = () => {\n//         localStorage.removeItem('token');  // Remove token from localStorage\n//         toast.success(\"Logged out successfully\");\n//         navigate('/login');  // Redirect to login page\n//     };\n\n//     // Filter users based on search term\n//     const filteredUsers = users.filter(user =>\n//         user.username.toLowerCase().includes(searchTerm.toLowerCase())\n//     );\n\n//     return (\n\n//         <div className=\"container\">\n\n//             <h2 className=\"title\">All Users</h2>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Search users...\"\n//                 value={searchTerm}\n//                 onChange={(e) => setSearchTerm(e.target.value)}  // Update search term\n//                 className=\"search-input\"\n//             />\n\n//             <div className=\"list\">\n//                 {filteredUsers.length === 0 ? (\n//                     <p>No users found</p>\n//                 ) : (\n//                     filteredUsers.map(user => (\n//                         <div className=\"user-card\" key={user._id}>\n//                             <span className=\"username\">{user.username}</span>\n//                             <button className=\"btn btn-add\" onClick={() => addFriend(user._id)}>Add Friend</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <h2 className=\"title\">Friends List</h2>\n//             <div className=\"list\">\n//                 {friends.length === 0 ? (\n//                     <p>You have no friends yet.</p>\n//                 ) : (\n//                     friends.map(friend => (\n//                         <div className=\"user-card\" key={friend._id}>\n//                             <span className=\"username\">{friend.username}</span>\n//                             <button className=\"btn btn-remove\" onClick={() => removeFriend(friend._id)}>Unfriend</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <h2 className=\"title\">Recommendations</h2>\n//             <div className=\"list\">\n//                 {recommendations.length === 0 ? (\n//                     <p>No recommendations found</p>\n//                 ) : (\n//                     recommendations.map(rec => (\n//                         <div className=\"user-card\" key={rec._id}>\n//                             <span className=\"username\">{rec.username}</span>\n//                             <span className=\"mutual-friends\">Mutual Friends: {rec.mutualFriendsCount}</span>\n//                             <button className=\"btn btn-add\" onClick={() => addFriend(rec._id)}>Add Friend</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <h2 className=\"title\">Friend Requests</h2>\n//             <div className=\"list\">\n//                 {friendRequests.length === 0 ? (\n//                     <p>No friend requests</p>\n//                 ) : (\n//                     friendRequests.map(request => (\n//                         <div className=\"user-card\" key={request._id}>\n//                             <span className=\"username\">{request.username}</span>\n//                             <button className=\"btn btn-accept\" onClick={() => acceptRequest(request._id)}>Accept</button>\n//                             <button className=\"btn btn-reject\" onClick={() => rejectRequest(request._id)}>Reject</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <button className=\"btn btn-logout\" onClick={logout}>Logout</button>  {/* Logout button */}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [friends, setFriends] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [friendRequests, setFriendRequests] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [darkMode, setDarkMode] = useState(false); // Dark mode state\n  const navigate = useNavigate();\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const userResponse = await axios.get('http://localhost:3000/api/users', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUsers(userResponse.data);\n        const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriends(friendResponse.data);\n        const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRecommendations(recommendationResponse.data);\n        const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setFriendRequests(requestResponse.data);\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    };\n    fetchData();\n  }, [token]);\n  const addFriend = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request sent\");\n      setUsers(users.filter(user => user._id !== userId));\n      setRecommendations(recommendations.filter(rec => rec._id !== userId));\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error sending friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const acceptRequest = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request/accept', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request accepted\");\n      setFriendRequests(friendRequests.filter(request => request._id !== userId));\n      const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFriends(friendResponse.data);\n    } catch (error) {\n      console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const rejectRequest = async userId => {\n    try {\n      await axios.post('http://localhost:3000/api/friend-request/reject', {\n        userId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend request rejected\");\n      setFriendRequests(friendRequests.filter(request => request._id !== userId));\n    } catch (error) {\n      console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n    }\n  };\n  const removeFriend = async friendId => {\n    try {\n      await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success(\"Friend removed\");\n      setFriends(friends.filter(friend => friend._id !== friendId));\n    } catch (error) {\n      console.error('Error removing friend', error.response ? error.response.data : error.message);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    toast.success(\"Logged out successfully\");\n    navigate('/login');\n  };\n\n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.body.classList.toggle('dark-mode'); // Add or remove dark mode class on body\n  };\n  const filteredUsers = users.filter(user => user.username.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `container ${darkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"All Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-toggle\",\n        onClick: toggleDarkMode,\n        children: darkMode ? 'Light Mode' : 'Dark Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search users...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      className: \"search-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: filteredUsers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No users found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }, this) : filteredUsers.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-add\",\n          onClick: () => addFriend(user._id),\n          children: \"Add Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 29\n        }, this)]\n      }, user._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"zEUgit2TF+IAe3f9hx7hhfJLizU=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","axios","toast","ToastContainer","useNavigate","jsxDEV","_jsxDEV","Home","_s","users","setUsers","friends","setFriends","recommendations","setRecommendations","friendRequests","setFriendRequests","searchTerm","setSearchTerm","darkMode","setDarkMode","navigate","token","localStorage","getItem","fetchData","userResponse","get","headers","Authorization","data","friendResponse","recommendationResponse","requestResponse","error","console","addFriend","userId","post","success","filter","user","_id","rec","response","message","acceptRequest","request","rejectRequest","removeFriend","friendId","delete","friend","logout","removeItem","toggleDarkMode","document","body","classList","toggle","filteredUsers","username","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","length","map","_c","$RefreshReg$"],"sources":["/Users/aasthachandel/my-app/frontend/src/components/Home.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { toast, ToastContainer } from 'react-toastify';\n// import { useNavigate } from 'react-router-dom';  // Import useNavigate for redirection\n// import 'react-toastify/dist/ReactToastify.css';\n// import './Home.css'; // Import the CSS file\n\n// const Home = () => {\n\n//     const [users, setUsers] = useState([]);\n//     const [friends, setFriends] = useState([]);\n//     const [recommendations, setRecommendations] = useState([]);\n//     const [friendRequests, setFriendRequests] = useState([]);\n//     const [searchTerm, setSearchTerm] = useState(''); // State for search term\n//     const navigate = useNavigate();  // Initialize useNavigate\n\n//     const token = localStorage.getItem('token');\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch users\n//                 const userResponse = await axios.get('http://localhost:3000/api/users', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setUsers(userResponse.data);\n\n//                 // Fetch friends\n//                 const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriends(friendResponse.data);\n\n//                 // Fetch recommendations\n//                 const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setRecommendations(recommendationResponse.data);\n//                 console.log(\"recomm\", recommendationResponse.data)\n//                 // Fetch friend requests\n//                 const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 setFriendRequests(requestResponse.data);\n\n//             } catch (error) {\n//                 console.error('Error fetching data', error);\n//             }\n//         };\n//         fetchData();\n//     }, [token]);\n\n//     const addFriend = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request sent\");\n\n//             setUsers(users.filter(user => user._id !== userId));\n//             setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error sending friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const acceptRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/accept',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request accepted\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//             const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             setFriends(friendResponse.data);\n\n//         } catch (error) {\n//             console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const rejectRequest = async (userId) => {\n//         try {\n//             await axios.post(\n//                 'http://localhost:3000/api/friend-request/reject',\n//                 { userId },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n//             toast.success(\"Friend request rejected\");\n\n//             setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n//         } catch (error) {\n//             console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     const removeFriend = async (friendId) => {\n//         try {\n//             await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n//             toast.success(\"Friend removed\");\n\n//             setFriends(friends.filter(friend => friend._id !== friendId));\n\n//         } catch (error) {\n//             console.error('Error removing friend', error.response ? error.response.data : error.message);\n//         }\n//     };\n\n//     // Logout function\n//     const logout = () => {\n//         localStorage.removeItem('token');  // Remove token from localStorage\n//         toast.success(\"Logged out successfully\");\n//         navigate('/login');  // Redirect to login page\n//     };\n\n//     // Filter users based on search term\n//     const filteredUsers = users.filter(user =>\n//         user.username.toLowerCase().includes(searchTerm.toLowerCase())\n//     );\n\n//     return (\n\n//         <div className=\"container\">\n\n//             <h2 className=\"title\">All Users</h2>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Search users...\"\n//                 value={searchTerm}\n//                 onChange={(e) => setSearchTerm(e.target.value)}  // Update search term\n//                 className=\"search-input\"\n//             />\n\n//             <div className=\"list\">\n//                 {filteredUsers.length === 0 ? (\n//                     <p>No users found</p>\n//                 ) : (\n//                     filteredUsers.map(user => (\n//                         <div className=\"user-card\" key={user._id}>\n//                             <span className=\"username\">{user.username}</span>\n//                             <button className=\"btn btn-add\" onClick={() => addFriend(user._id)}>Add Friend</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <h2 className=\"title\">Friends List</h2>\n//             <div className=\"list\">\n//                 {friends.length === 0 ? (\n//                     <p>You have no friends yet.</p>\n//                 ) : (\n//                     friends.map(friend => (\n//                         <div className=\"user-card\" key={friend._id}>\n//                             <span className=\"username\">{friend.username}</span>\n//                             <button className=\"btn btn-remove\" onClick={() => removeFriend(friend._id)}>Unfriend</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <h2 className=\"title\">Recommendations</h2>\n//             <div className=\"list\">\n//                 {recommendations.length === 0 ? (\n//                     <p>No recommendations found</p>\n//                 ) : (\n//                     recommendations.map(rec => (\n//                         <div className=\"user-card\" key={rec._id}>\n//                             <span className=\"username\">{rec.username}</span>\n//                             <span className=\"mutual-friends\">Mutual Friends: {rec.mutualFriendsCount}</span>\n//                             <button className=\"btn btn-add\" onClick={() => addFriend(rec._id)}>Add Friend</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <h2 className=\"title\">Friend Requests</h2>\n//             <div className=\"list\">\n//                 {friendRequests.length === 0 ? (\n//                     <p>No friend requests</p>\n//                 ) : (\n//                     friendRequests.map(request => (\n//                         <div className=\"user-card\" key={request._id}>\n//                             <span className=\"username\">{request.username}</span>\n//                             <button className=\"btn btn-accept\" onClick={() => acceptRequest(request._id)}>Accept</button>\n//                             <button className=\"btn btn-reject\" onClick={() => rejectRequest(request._id)}>Reject</button>\n//                         </div>\n//                     ))\n//                 )}\n//             </div>\n\n//             <button className=\"btn btn-logout\" onClick={logout}>Logout</button>  {/* Logout button */}\n\n//             <ToastContainer />\n//         </div>\n//     );\n// };\n\n// export default Home;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Home.css';\n\nconst Home = () => {\n    const [users, setUsers] = useState([]);\n    const [friends, setFriends] = useState([]);\n    const [recommendations, setRecommendations] = useState([]);\n    const [friendRequests, setFriendRequests] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [darkMode, setDarkMode] = useState(false);  // Dark mode state\n    const navigate = useNavigate();\n    const token = localStorage.getItem('token');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const userResponse = await axios.get('http://localhost:3000/api/users', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setUsers(userResponse.data);\n\n                const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriends(friendResponse.data);\n\n                const recommendationResponse = await axios.get('http://localhost:3000/api/recommendations', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRecommendations(recommendationResponse.data);\n\n                const requestResponse = await axios.get('http://localhost:3000/api/friend-requests', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setFriendRequests(requestResponse.data);\n\n            } catch (error) {\n                console.error('Error fetching data', error);\n            }\n        };\n        fetchData();\n    }, [token]);\n\n    const addFriend = async (userId) => {\n        try {\n            await axios.post(\n                'http://localhost:3000/api/friend-request',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Friend request sent\");\n            setUsers(users.filter(user => user._id !== userId));\n            setRecommendations(recommendations.filter(rec => rec._id !== userId));\n\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n\n        } catch (error) {\n            console.error('Error sending friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const acceptRequest = async (userId) => {\n        try {\n            await axios.post(\n                'http://localhost:3000/api/friend-request/accept',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Friend request accepted\");\n            setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n            const friendResponse = await axios.get('http://localhost:3000/api/friends', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            setFriends(friendResponse.data);\n\n        } catch (error) {\n            console.error('Error accepting friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const rejectRequest = async (userId) => {\n        try {\n            await axios.post(\n                'http://localhost:3000/api/friend-request/reject',\n                { userId },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Friend request rejected\");\n            setFriendRequests(friendRequests.filter(request => request._id !== userId));\n\n        } catch (error) {\n            console.error('Error rejecting friend request', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const removeFriend = async (friendId) => {\n        try {\n            await axios.delete(`http://localhost:3000/api/friend/${friendId}`, {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            toast.success(\"Friend removed\");\n            setFriends(friends.filter(friend => friend._id !== friendId));\n\n        } catch (error) {\n            console.error('Error removing friend', error.response ? error.response.data : error.message);\n        }\n    };\n\n    const logout = () => {\n        localStorage.removeItem('token');\n        toast.success(\"Logged out successfully\");\n        navigate('/login');\n    };\n\n    // Toggle dark mode\n    const toggleDarkMode = () => {\n        setDarkMode(!darkMode);\n        document.body.classList.toggle('dark-mode');  // Add or remove dark mode class on body\n    };\n\n    const filteredUsers = users.filter(user =>\n        user.username.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    return (\n        <div className={`container ${darkMode ? 'dark-mode' : ''}`}>\n            <div className=\"header\">\n                <h2 className=\"title\">All Users</h2>\n                <button className=\"btn btn-toggle\" onClick={toggleDarkMode}>\n                    {darkMode ? 'Light Mode' : 'Dark Mode'}\n                </button>\n            </div>\n            <input\n                type=\"text\"\n                placeholder=\"Search users...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"search-input\"\n            />\n            <div className=\"list\">\n                {filteredUsers.length === 0 ? (\n                    <p>No users found</p>\n                ) : (\n                    filteredUsers.map(user => (\n                        <div className=\"user-card\" key={user._id}>\n                            <span className=\"username\">{user.username}</span>\n                            <button className=\"btn btn-add\" onClick={() => addFriend(user._id)}>Add Friend</button>\n                        </div>\n                    ))\n                )}\n            </div>\n\n            {/* Friends, Recommendations, Friend Requests, Logout, and ToastContainer code remains the same */}\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,uCAAuC;AAC9C,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}